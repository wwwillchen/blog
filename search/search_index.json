{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Blog","text":""},{"location":"2023/12/26/server-driven-ui/","title":"Server-driven UI","text":"<p>Server-driven UI describes the paradigm where the server is responsible for determining the overall UI composition from the layout to the discrete components rendered on the page.</p> <p>I see three key motivations of why frameworks adopt a server-driven UI paradigm:</p> <ol> <li>Enable a better user experience by making performance optimizations straightforward.</li> <li>Provide a better developer experience, particularly for non-JS developers.</li> <li>Enable faster release velocity, particularly for mobile apps.</li> </ol>"},{"location":"2023/12/26/server-driven-ui/#better-user-experience","title":"Better user experience","text":"<p>I think Remix was one of the early entrants (2021) in the React scene to emphasize server-driven UIs. Remix in particular focuses on improving performance by avoiding data waterfalls by emphasizing what they call nested routes. Essentially, all the main components on the page should not have data dependency and instead be able to fetch its data based on the route parameters.</p> <p>Since then, React itself has embraced server-driven UIs through React Server Components. Dan Abramov's talk React from another dimension is a fun step-by-step walkthrough of building a React app, but imagining React as a server-driven framework.</p>"},{"location":"2023/12/26/server-driven-ui/#better-developer-experience","title":"Better developer experience","text":"<p>Another kind of motivation for server-driven UI frameworks is the desire to use another language besides JavaScript to build rich web apps.</p> <p>htmx is a popular option for developers using a non-JS language because it pairs well with standard HTML-based templating solutions by enabling JS-like interactivity without actually writing JS.</p> <p>In the Python world, there's many server-driven UI frameworks with the main emphasis of catering to Python developers (e.g. data scientists, ML engineers) who don't want to learn a JS and a front-end framework to build a web app to demo something. Streamlit and Gradio are the two most popular options, but there are many other Python-based UI frameworks such as Solara, NiceGUI, JustPy, remi, and Starfyre.</p> <p>Other language ecosystem have developed their own equivalent solutions. For example, Elixir has LiveView and Ruby on Rails has Turbo.</p>"},{"location":"2023/12/26/server-driven-ui/#faster-release-velocity","title":"Faster release velocity","text":"<p>The last kind of motivation that I often see deals with the reality that mobile apps oftentimes have slower release velocity due to the app review cycle.</p> <p>Flutter's rfw package (Remote Flutter Widgets) and Airbnb's server-driven UI system are examples of addressing this issue.</p>"},{"location":"2023/12/26/server-driven-ui/#conclusion","title":"Conclusion","text":"<p>One of the most interesting projects in this space is Hyperfiddle electric which compiles a single Clojure codebase into a client and server application. This blurring of the client-server boundary is fascinating and I think it's something to pay attention to as we see more and more traditionally client-driven frameworks become more server-driven.</p> <p>One of the key takeaways that I have with server-driven UI frameworks is that each of these reasons provide a \"big win\". Otherwise, it's not really worth embracing a paradigm shift.</p>"},{"location":"archive/2023/","title":"2023","text":""}]}